<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 2016/9/26 10:06:06 lenovo created. -->
<!-- Generated by Caven.CodeBuilder (funiJava.mybatis_map 1.0). -->

<mapper namespace="com.dyb.platforms.fixfunds.services.business.bankaccount.dao.IBankAccountDao">

    <resultMap type="com.dyb.platforms.fixfunds.services.business.bankaccount.entity.BankAccount" id="resultMap">
        <id property="bankAccountCode" column="bankaccountcode" />
        <result property="bankName" column="bankname" />
        <result property="bankBranch" column="bankbranch" />
        <result property="bankNum" column="banknum" />
        <result property="bankAccountName" column="bankaccountname" />
        <result property="defaultChecked" column="defaultchecked" />
        <result property="createTime" column="createtime" />
        <result property="accountCode" column="accountcode" />
    </resultMap>

    <sql id="baseCol">
        bankaccountcode, bankname, bankbranch, banknum, bankaccountname, defaultchecked, createtime, accountcode
    </sql>

    <sql id="whereSql">
        <trim prefix="WHERE" prefixOverrides="and |or ">
            <if test="bankAccountCode != null"><![CDATA[ and bankaccountcode like #{bankAccountCode} ]]></if>
            <if test="bankAccountCode_enum != null">
                <![CDATA[ and bankaccountcode in ]]>
                <foreach collection="bankAccountCode_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="bankName != null"><![CDATA[ and bankname like #{bankName} ]]></if>
            <if test="bankName_enum != null">
                <![CDATA[ and bankname in ]]>
                <foreach collection="bankName_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="bankBranch != null"><![CDATA[ and bankbranch like #{bankBranch} ]]></if>
            <if test="bankBranch_enum != null">
                <![CDATA[ and bankbranch in ]]>
                <foreach collection="bankBranch_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="bankNum != null"><![CDATA[ and banknum like #{bankNum} ]]></if>
            <if test="bankNum_enum != null">
                <![CDATA[ and banknum in ]]>
                <foreach collection="bankNum_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="bankAccountName != null"><![CDATA[ and bankaccountname like #{bankAccountName} ]]></if>
            <if test="bankAccountName_enum != null">
                <![CDATA[ and bankaccountname in ]]>
                <foreach collection="bankAccountName_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="defaultChecked != null"><![CDATA[ and defaultchecked = #{defaultChecked} ]]></if>
            <if test="createTime != null"><![CDATA[ and createtime = #{createTime} ]]></if>
            <if test="createTime_r_min != null"><![CDATA[ and createtime >= #{createTime_r_min} and createtime < #{createTime_r_max} ]]></if>
            <if test="accountCode != null"><![CDATA[ and accountcode like #{accountCode} ]]></if>
            <if test="accountCode_enum != null">
                <![CDATA[ and accountcode in ]]>
                <foreach collection="accountCode_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="_default_mulattr != null">
                <![CDATA[ and ]]>
                <foreach collection="_default_mulattr" item="item" open="(" separator=" or " close=")">
                    <if test="item.name == 'bankAccountCode'"><![CDATA[ bankaccountcode like #{item.value} ]]></if>
                    <if test="item.name == 'bankName'"><![CDATA[ bankname like #{item.value} ]]></if>
                    <if test="item.name == 'bankBranch'"><![CDATA[ bankbranch like #{item.value} ]]></if>
                    <if test="item.name == 'bankNum'"><![CDATA[ banknum like #{item.value} ]]></if>
                    <if test="item.name == 'bankAccountName'"><![CDATA[ bankaccountname like #{item.value} ]]></if>
                    <if test="item.name == 'accountCode'"><![CDATA[ accountcode like #{item.value} ]]></if>
                </foreach>
            </if>
        </trim>
    </sql>

    <sql id="orderSql">
        <trim prefix="ORDER BY" suffixOverrides=",">
            <if test="_orderBy == 'bankAccountCode_desc'"><![CDATA[ bankaccountcode desc, ]]></if>
            <if test="_orderBy == 'bankAccountCode_asc'"><![CDATA[ bankaccountcode, ]]></if>
            <if test="_orderBy == 'bankName_desc'"><![CDATA[ bankname desc, ]]></if>
            <if test="_orderBy == 'bankName_asc'"><![CDATA[ bankname, ]]></if>
            <if test="_orderBy == 'bankBranch_desc'"><![CDATA[ bankbranch desc, ]]></if>
            <if test="_orderBy == 'bankBranch_asc'"><![CDATA[ bankbranch, ]]></if>
            <if test="_orderBy == 'bankNum_desc'"><![CDATA[ banknum desc, ]]></if>
            <if test="_orderBy == 'bankNum_asc'"><![CDATA[ banknum, ]]></if>
            <if test="_orderBy == 'bankAccountName_desc'"><![CDATA[ bankaccountname desc, ]]></if>
            <if test="_orderBy == 'bankAccountName_asc'"><![CDATA[ bankaccountname, ]]></if>
            <if test="_orderBy == 'defaultChecked_desc'"><![CDATA[ defaultchecked desc, ]]></if>
            <if test="_orderBy == 'defaultChecked_asc'"><![CDATA[ defaultchecked, ]]></if>
            <if test="_orderBy == 'createTime_desc'"><![CDATA[ createtime desc, ]]></if>
            <if test="_orderBy == 'createTime_asc'"><![CDATA[ createtime, ]]></if>
            <if test="_orderBy == 'accountCode_desc'"><![CDATA[ accountcode desc, ]]></if>
            <if test="_orderBy == 'accountCode_asc'"><![CDATA[ accountcode, ]]></if>
        </trim>
    </sql>

    <insert id="insertObject" parameterType="com.dyb.platforms.fixfunds.services.business.bankaccount.entity.BankAccount">
        insert into
        dyb_bankaccount(bankaccountcode,bankname,bankbranch,banknum,bankaccountname,defaultchecked,createtime,accountcode)
        values(#{bankAccountCode},#{bankName},#{bankBranch},#{bankNum},#{bankAccountName},#{defaultChecked},#{createTime},#{accountCode});
    </insert>

    <update id="updateObject" parameterType="com.dyb.platforms.fixfunds.services.business.bankaccount.entity.BankAccount">
        update dyb_bankaccount
        set bankname=#{bankName},bankbranch=#{bankBranch},banknum=#{bankNum},bankaccountname=#{bankAccountName},defaultchecked=#{defaultChecked},createtime=#{createTime},accountcode=#{accountCode}
        where bankaccountcode=#{bankAccountCode};
    </update>

    <delete id="deleteObject" parameterType="string">
        delete from dyb_bankaccount where bankaccountcode=#{bankAccountCode};
    </delete>

    <delete id="deleteObjectByWhere" parameterType="com.dyb.platforms.fixfunds.services.utils.core.QueryParams">
        delete from dyb_bankaccount
        <include refid="whereSql" />
    </delete>

    <select id="getBaseObject" parameterType="string" resultMap="resultMap">
        select
        <include refid="baseCol" />
        from dyb_bankaccount where bankaccountcode=#{bankAccountCode};
    </select>

    <select id="getDetailObject" parameterType="string" resultMap="resultMap">
        select * from dyb_bankaccount where bankaccountcode=#{bankAccountCode};
    </select>

    <select id="queryCount" parameterType="com.dyb.platforms.fixfunds.services.utils.core.QueryParams" resultType="int">
        select count(*) from dyb_bankaccount
        <include refid="whereSql" />
    </select>

    <select id="queryBaseList" parameterType="com.dyb.platforms.fixfunds.services.utils.core.QueryParams" resultMap="resultMap">
        select
        <include refid="baseCol" />
        from dyb_bankaccount
        <include refid="whereSql" />
        <include refid="orderSql" />
    </select>

    <select id="queryDetailList" parameterType="com.dyb.platforms.fixfunds.services.utils.core.QueryParams" resultMap="resultMap">
        select * from dyb_bankaccount
        <include refid="whereSql" />
        <include refid="orderSql" />
    </select>
</mapper> 


