<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 2016/9/27 19:52:14 lenovo created. -->
<!-- Generated by Caven.CodeBuilder (funiJava.mybatis_map 1.0). -->

<mapper namespace="com.dyb.platforms.fixfunds.services.business.turnover.dao.ITurnoverDao">

    <resultMap type="com.dyb.platforms.fixfunds.services.business.turnover.entity.Turnover" id="resultMap">
        <id property="turnoverCode" column="turnovercode" />
        <result property="turnoverTime" column="turnovertime" />
        <result property="turnoverPrice" column="turnoverprice" />
        <result property="benefitPrice" column="benefitprice" />
        <result property="yetBenefitPrice" column="yetbenefitprice" />
        <result property="residueBenefitPrice" column="residuebenefitprice" />
        <result property="benefitPriceStatus" column="benefitpricestatus" />
        <result property="createTime" column="createtime" />
        <result property="remark" column="remark" />
    </resultMap>

    <sql id="baseCol">
        turnovercode, turnovertime, turnoverprice, benefitprice, yetbenefitprice, residuebenefitprice, benefitpricestatus, createtime, remark
    </sql>

    <sql id="whereSql">
        <trim prefix="WHERE" prefixOverrides="and |or ">
            <if test="turnoverCode != null"><![CDATA[ and turnovercode like #{turnoverCode} ]]></if>
            <if test="turnoverCode_enum != null">
                <![CDATA[ and turnovercode in ]]>
                <foreach collection="turnoverCode_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="turnoverTime != null"><![CDATA[ and turnovertime = #{turnoverTime} ]]></if>
            <if test="turnoverTime_r_min != null"><![CDATA[ and turnovertime >= #{turnoverTime_r_min} and turnovertime < #{turnoverTime_r_max} ]]></if>
            <if test="turnoverPrice != null"><![CDATA[ and turnoverprice = #{turnoverPrice} ]]></if>
            <if test="turnoverPrice_r_min != null"><![CDATA[ and turnoverprice >= #{turnoverPrice_r_min} and turnoverprice <= #{turnoverPrice_r_max} ]]></if>
            <if test="turnoverPrice_enum != null">
                <![CDATA[ and turnoverprice in ]]>
                <foreach collection="turnoverPrice_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="benefitPrice != null"><![CDATA[ and benefitprice = #{benefitPrice} ]]></if>
            <if test="benefitPrice_r_min != null"><![CDATA[ and benefitprice >= #{benefitPrice_r_min} and benefitprice <= #{benefitPrice_r_max} ]]></if>
            <if test="benefitPrice_enum != null">
                <![CDATA[ and benefitprice in ]]>
                <foreach collection="benefitPrice_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="yetBenefitPrice != null"><![CDATA[ and yetbenefitprice = #{yetBenefitPrice} ]]></if>
            <if test="yetBenefitPrice_r_min != null"><![CDATA[ and yetbenefitprice >= #{yetBenefitPrice_r_min} and yetbenefitprice <= #{yetBenefitPrice_r_max} ]]></if>
            <if test="yetBenefitPrice_enum != null">
                <![CDATA[ and yetbenefitprice in ]]>
                <foreach collection="yetBenefitPrice_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="residueBenefitPrice != null"><![CDATA[ and residuebenefitprice = #{residueBenefitPrice} ]]></if>
            <if test="residueBenefitPrice_r_min != null"><![CDATA[ and residuebenefitprice >= #{residueBenefitPrice_r_min} and residuebenefitprice <= #{residueBenefitPrice_r_max} ]]></if>
            <if test="residueBenefitPrice_enum != null">
                <![CDATA[ and residuebenefitprice in ]]>
                <foreach collection="residueBenefitPrice_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="benefitPriceStatus != null"><![CDATA[ and benefitpricestatus like #{benefitPriceStatus} ]]></if>
            <if test="benefitPriceStatus_enum != null">
                <![CDATA[ and benefitpricestatus in ]]>
                <foreach collection="benefitPriceStatus_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="createTime != null"><![CDATA[ and createtime = #{createTime} ]]></if>
            <if test="createTime_r_min != null"><![CDATA[ and createtime >= #{createTime_r_min} and createtime < #{createTime_r_max} ]]></if>
            <if test="remark != null"><![CDATA[ and remark like #{remark} ]]></if>
            <if test="remark_enum != null">
                <![CDATA[ and remark in ]]>
                <foreach collection="remark_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="_default_mulattr != null">
                <![CDATA[ and ]]>
                <foreach collection="_default_mulattr" item="item" open="(" separator=" or " close=")">
                    <if test="item.name == 'turnoverCode'"><![CDATA[ turnovercode like #{item.value} ]]></if>
                    <if test="item.name == 'benefitPriceStatus'"><![CDATA[ benefitpricestatus like #{item.value} ]]></if>
                    <if test="item.name == 'remark'"><![CDATA[ remark like #{item.value} ]]></if>
                </foreach>
            </if>
        </trim>
    </sql>

    <sql id="orderSql">
        <trim prefix="ORDER BY" suffixOverrides=",">
            <if test="_orderBy == 'turnoverCode_desc'"><![CDATA[ turnovercode desc, ]]></if>
            <if test="_orderBy == 'turnoverCode_asc'"><![CDATA[ turnovercode, ]]></if>
            <if test="_orderBy == 'turnoverTime_desc'"><![CDATA[ turnovertime desc, ]]></if>
            <if test="_orderBy == 'turnoverTime_asc'"><![CDATA[ turnovertime, ]]></if>
            <if test="_orderBy == 'turnoverPrice_desc'"><![CDATA[ turnoverprice desc, ]]></if>
            <if test="_orderBy == 'turnoverPrice_asc'"><![CDATA[ turnoverprice, ]]></if>
            <if test="_orderBy == 'benefitPrice_desc'"><![CDATA[ benefitprice desc, ]]></if>
            <if test="_orderBy == 'benefitPrice_asc'"><![CDATA[ benefitprice, ]]></if>
            <if test="_orderBy == 'yetBenefitPrice_desc'"><![CDATA[ yetbenefitprice desc, ]]></if>
            <if test="_orderBy == 'yetBenefitPrice_asc'"><![CDATA[ yetbenefitprice, ]]></if>
            <if test="_orderBy == 'residueBenefitPrice_desc'"><![CDATA[ residuebenefitprice desc, ]]></if>
            <if test="_orderBy == 'residueBenefitPrice_asc'"><![CDATA[ residuebenefitprice, ]]></if>
            <if test="_orderBy == 'benefitPriceStatus_desc'"><![CDATA[ benefitpricestatus desc, ]]></if>
            <if test="_orderBy == 'benefitPriceStatus_asc'"><![CDATA[ benefitpricestatus, ]]></if>
            <if test="_orderBy == 'createTime_desc'"><![CDATA[ createtime desc, ]]></if>
            <if test="_orderBy == 'createTime_asc'"><![CDATA[ createtime, ]]></if>
            <if test="_orderBy == 'remark_desc'"><![CDATA[ remark desc, ]]></if>
            <if test="_orderBy == 'remark_asc'"><![CDATA[ remark, ]]></if>
        </trim>
    </sql>

    <insert id="insertObject" parameterType="com.dyb.platforms.fixfunds.services.business.turnover.entity.Turnover">
        insert into
        dyb_turnover(turnovercode,turnovertime,turnoverprice,benefitprice,yetbenefitprice,residuebenefitprice,benefitpricestatus,createtime,remark)
        values(#{turnoverCode},#{turnoverTime},#{turnoverPrice},#{benefitPrice},#{yetBenefitPrice},#{residueBenefitPrice},#{benefitPriceStatus},#{createTime},#{remark});
    </insert>

    <update id="updateObject" parameterType="com.dyb.platforms.fixfunds.services.business.turnover.entity.Turnover">
        update dyb_turnover
        set turnovertime=#{turnoverTime},turnoverprice=#{turnoverPrice},benefitprice=#{benefitPrice},yetbenefitprice=#{yetBenefitPrice},residuebenefitprice=#{residueBenefitPrice},benefitpricestatus=#{benefitPriceStatus},createtime=#{createTime},remark=#{remark}
        where turnovercode=#{turnoverCode};
    </update>

    <delete id="deleteObject" parameterType="string">
        delete from dyb_turnover where turnovercode=#{turnoverCode};
    </delete>

    <delete id="deleteObjectByWhere" parameterType="com.dyb.platforms.fixfunds.services.utils.core.QueryParams">
        delete from dyb_turnover
        <include refid="whereSql" />
    </delete>

    <select id="getBaseObject" parameterType="string" resultMap="resultMap">
        select 
        <include refid="baseCol" />
        from dyb_turnover where turnovercode=#{turnoverCode};
    </select>

    <select id="getDetailObject" parameterType="string" resultMap="resultMap">
        select * from dyb_turnover where turnovercode=#{turnoverCode};
    </select>

    <select id="queryCount" parameterType="com.dyb.platforms.fixfunds.services.utils.core.QueryParams" resultType="int">
        select count(*) from dyb_turnover
          <include refid="whereSql" />
    </select>

    <select id="queryBaseList" parameterType="com.dyb.platforms.fixfunds.services.utils.core.QueryParams" resultMap="resultMap">
        select 
        <include refid="baseCol" />
        from dyb_turnover
          <include refid="whereSql" />
        <include refid="orderSql" />
    </select>

    <select id="queryDetailList" parameterType="com.dyb.platforms.fixfunds.services.utils.core.QueryParams" resultMap="resultMap">
        select * from dyb_turnover
          <include refid="whereSql" />
        <include refid="orderSql" />
    </select>
</mapper> 


