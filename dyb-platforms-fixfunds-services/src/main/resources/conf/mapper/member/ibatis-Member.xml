<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 2016/9/20 14:24:26 lenovo created. -->
<!-- Generated by Caven.CodeBuilder (funiJava.mybatis_map 1.0). -->

<mapper namespace="com.dyb.platforms.fixfunds.services.business.member.dao.IMemberDao">

    <resultMap type="com.dyb.platforms.fixfunds.services.business.member.entity.Member" id="resultMap">
        <id property="memberCode" column="membercode" />
        <result property="memberName" column="membername" />
        <result property="memberType" column="membertype" />
        <result property="realName" column="realname" />
        <result property="sex" column="sex" />
        <result property="nativePlace" column="nativeplace" />
        <result property="certificate" column="certificate" />
        <result property="certificateNumber" column="certificatenumber" />
        <result property="memberPhone" column="memberphone" />
        <result property="industry" column="industry" />
        <result property="birthday" column="birthday" />
        <result property="memberEmail" column="memberemail" />
        <result property="createTime" column="createtime" />
        <result property="password" column="password" />
        <result property="tradePassword" column="tradepassword" />
        <result property="memberStatus" column="memberstatus" />
    </resultMap>

    <sql id="baseCol">
        membercode, membername, membertype, realname, sex, nativeplace, certificate, certificatenumber, memberphone, industry, birthday, memberemail, createtime, password, tradepassword, memberstatus
    </sql>

    <sql id="whereSql">
        <trim prefix="WHERE" prefixOverrides="and |or ">
            <if test="memberCode != null"><![CDATA[ and membercode like #{memberCode} ]]></if>
            <if test="memberCode_enum != null">
                <![CDATA[ and membercode in ]]>
                <foreach collection="memberCode_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="memberName != null"><![CDATA[ and membername like #{memberName} ]]></if>
            <if test="memberName_enum != null">
                <![CDATA[ and membername in ]]>
                <foreach collection="memberName_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="memberType != null"><![CDATA[ and membertype like #{memberType} ]]></if>
            <if test="memberType_enum != null">
                <![CDATA[ and membertype in ]]>
                <foreach collection="memberType_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="realName != null"><![CDATA[ and realname like #{realName} ]]></if>
            <if test="realName_enum != null">
                <![CDATA[ and realname in ]]>
                <foreach collection="realName_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="sex != null"><![CDATA[ and sex like #{sex} ]]></if>
            <if test="sex_enum != null">
                <![CDATA[ and sex in ]]>
                <foreach collection="sex_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="nativePlace != null"><![CDATA[ and nativeplace like #{nativePlace} ]]></if>
            <if test="nativePlace_enum != null">
                <![CDATA[ and nativeplace in ]]>
                <foreach collection="nativePlace_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="certificate != null"><![CDATA[ and certificate like #{certificate} ]]></if>
            <if test="certificate_enum != null">
                <![CDATA[ and certificate in ]]>
                <foreach collection="certificate_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="certificateNumber != null"><![CDATA[ and certificatenumber like #{certificateNumber} ]]></if>
            <if test="certificateNumber_enum != null">
                <![CDATA[ and certificatenumber in ]]>
                <foreach collection="certificateNumber_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="memberPhone != null"><![CDATA[ and memberphone like #{memberPhone} ]]></if>
            <if test="memberPhone_enum != null">
                <![CDATA[ and memberphone in ]]>
                <foreach collection="memberPhone_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="industry != null"><![CDATA[ and industry like #{industry} ]]></if>
            <if test="industry_enum != null">
                <![CDATA[ and industry in ]]>
                <foreach collection="industry_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="birthday != null"><![CDATA[ and birthday = #{birthday} ]]></if>
            <if test="birthday_r_min != null"><![CDATA[ and birthday >= #{birthday_r_min} and birthday < #{birthday_r_max} ]]></if>
            <if test="memberEmail != null"><![CDATA[ and memberemail like #{memberEmail} ]]></if>
            <if test="memberEmail_enum != null">
                <![CDATA[ and memberemail in ]]>
                <foreach collection="memberEmail_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="createTime != null"><![CDATA[ and createtime = #{createTime} ]]></if>
            <if test="createTime_r_min != null"><![CDATA[ and createtime >= #{createTime_r_min} and createtime < #{createTime_r_max} ]]></if>
            <if test="password != null"><![CDATA[ and password like #{password} ]]></if>
            <if test="password_enum != null">
                <![CDATA[ and password in ]]>
                <foreach collection="password_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="tradePassword != null"><![CDATA[ and tradepassword like #{tradePassword} ]]></if>
            <if test="tradePassword_enum != null">
                <![CDATA[ and tradepassword in ]]>
                <foreach collection="tradePassword_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="memberStatus != null"><![CDATA[ and memberstatus like #{memberStatus} ]]></if>
            <if test="memberStatus_enum != null">
                <![CDATA[ and memberstatus in ]]>
                <foreach collection="memberStatus_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="_default_mulattr != null">
                <![CDATA[ and ]]>
                <foreach collection="_default_mulattr" item="item" open="(" separator=" or " close=")">
                    <if test="item.name == 'memberCode'"><![CDATA[ membercode like #{item.value} ]]></if>
                    <if test="item.name == 'memberName'"><![CDATA[ membername like #{item.value} ]]></if>
                    <if test="item.name == 'memberType'"><![CDATA[ membertype like #{item.value} ]]></if>
                    <if test="item.name == 'realName'"><![CDATA[ realname like #{item.value} ]]></if>
                    <if test="item.name == 'sex'"><![CDATA[ sex like #{item.value} ]]></if>
                    <if test="item.name == 'nativePlace'"><![CDATA[ nativeplace like #{item.value} ]]></if>
                    <if test="item.name == 'certificate'"><![CDATA[ certificate like #{item.value} ]]></if>
                    <if test="item.name == 'certificateNumber'"><![CDATA[ certificatenumber like #{item.value} ]]></if>
                    <if test="item.name == 'memberPhone'"><![CDATA[ memberphone like #{item.value} ]]></if>
                    <if test="item.name == 'industry'"><![CDATA[ industry like #{item.value} ]]></if>
                    <if test="item.name == 'memberEmail'"><![CDATA[ memberemail like #{item.value} ]]></if>
                    <if test="item.name == 'password'"><![CDATA[ password like #{item.value} ]]></if>
                    <if test="item.name == 'tradePassword'"><![CDATA[ tradepassword like #{item.value} ]]></if>
                    <if test="item.name == 'memberStatus'"><![CDATA[ memberstatus like #{item.value} ]]></if>
                </foreach>
            </if>
        </trim>
    </sql>

    <sql id="orderSql">
        <trim prefix="ORDER BY" suffixOverrides=",">
            <if test="_orderBy == 'memberCode_desc'"><![CDATA[ membercode desc, ]]></if>
            <if test="_orderBy == 'memberCode_asc'"><![CDATA[ membercode, ]]></if>
            <if test="_orderBy == 'memberName_desc'"><![CDATA[ membername desc, ]]></if>
            <if test="_orderBy == 'memberName_asc'"><![CDATA[ membername, ]]></if>
            <if test="_orderBy == 'memberType_desc'"><![CDATA[ membertype desc, ]]></if>
            <if test="_orderBy == 'memberType_asc'"><![CDATA[ membertype, ]]></if>
            <if test="_orderBy == 'realName_desc'"><![CDATA[ realname desc, ]]></if>
            <if test="_orderBy == 'realName_asc'"><![CDATA[ realname, ]]></if>
            <if test="_orderBy == 'sex_desc'"><![CDATA[ sex desc, ]]></if>
            <if test="_orderBy == 'sex_asc'"><![CDATA[ sex, ]]></if>
            <if test="_orderBy == 'nativePlace_desc'"><![CDATA[ nativeplace desc, ]]></if>
            <if test="_orderBy == 'nativePlace_asc'"><![CDATA[ nativeplace, ]]></if>
            <if test="_orderBy == 'certificate_desc'"><![CDATA[ certificate desc, ]]></if>
            <if test="_orderBy == 'certificate_asc'"><![CDATA[ certificate, ]]></if>
            <if test="_orderBy == 'certificateNumber_desc'"><![CDATA[ certificatenumber desc, ]]></if>
            <if test="_orderBy == 'certificateNumber_asc'"><![CDATA[ certificatenumber, ]]></if>
            <if test="_orderBy == 'memberPhone_desc'"><![CDATA[ memberphone desc, ]]></if>
            <if test="_orderBy == 'memberPhone_asc'"><![CDATA[ memberphone, ]]></if>
            <if test="_orderBy == 'industry_desc'"><![CDATA[ industry desc, ]]></if>
            <if test="_orderBy == 'industry_asc'"><![CDATA[ industry, ]]></if>
            <if test="_orderBy == 'birthday_desc'"><![CDATA[ birthday desc, ]]></if>
            <if test="_orderBy == 'birthday_asc'"><![CDATA[ birthday, ]]></if>
            <if test="_orderBy == 'memberEmail_desc'"><![CDATA[ memberemail desc, ]]></if>
            <if test="_orderBy == 'memberEmail_asc'"><![CDATA[ memberemail, ]]></if>
            <if test="_orderBy == 'createTime_desc'"><![CDATA[ createtime desc, ]]></if>
            <if test="_orderBy == 'createTime_asc'"><![CDATA[ createtime, ]]></if>
            <if test="_orderBy == 'password_desc'"><![CDATA[ password desc, ]]></if>
            <if test="_orderBy == 'password_asc'"><![CDATA[ password, ]]></if>
            <if test="_orderBy == 'tradePassword_desc'"><![CDATA[ tradepassword desc, ]]></if>
            <if test="_orderBy == 'tradePassword_asc'"><![CDATA[ tradepassword, ]]></if>
            <if test="_orderBy == 'memberStatus_desc'"><![CDATA[ memberstatus desc, ]]></if>
            <if test="_orderBy == 'memberStatus_asc'"><![CDATA[ memberstatus, ]]></if>
        </trim>
    </sql>

    <insert id="insertObject" parameterType="com.dyb.platforms.fixfunds.services.business.member.entity.Member">
        insert into
        dyb_member(membercode,membername,membertype,realname,sex,nativeplace,certificate,certificatenumber,memberphone,industry,birthday,memberemail,createtime,password,tradepassword,memberstatus)
        values(#{memberCode},#{memberName},#{memberType},#{realName},#{sex},#{nativePlace},#{certificate},#{certificateNumber},#{memberPhone},#{industry},#{birthday},#{memberEmail},#{createTime},#{password},#{tradePassword},#{memberStatus});
    </insert>

    <update id="updateObject" parameterType="com.dyb.platforms.fixfunds.services.business.member.entity.Member">
        update dyb_member
        set membername=#{memberName},membertype=#{memberType},realname=#{realName},sex=#{sex},nativeplace=#{nativePlace},certificate=#{certificate},certificatenumber=#{certificateNumber},memberphone=#{memberPhone},industry=#{industry},birthday=#{birthday},memberemail=#{memberEmail},createtime=#{createTime},password=#{password},tradepassword=#{tradePassword},memberstatus=#{memberStatus}
        where membercode=#{memberCode};
    </update>

    <delete id="deleteObject" parameterType="string">
        delete from dyb_member where membercode=#{memberCode};
    </delete>

    <delete id="deleteObjectByWhere" parameterType="com.dyb.platforms.fixfunds.services.utils.core.QueryParams">
        delete from dyb_member
        <include refid="whereSql" />
    </delete>

    <select id="getBaseObject" parameterType="string" resultMap="resultMap">
        select
        <include refid="baseCol" />
        from dyb_member where membercode=#{memberCode};
    </select>

    <select id="getDetailObject" parameterType="string" resultMap="resultMap">
        select * from dyb_member where membercode=#{memberCode};
    </select>

    <select id="queryCount" parameterType="com.dyb.platforms.fixfunds.services.utils.core.QueryParams" resultType="int">
        select count(*) from dyb_member
        <include refid="whereSql" />
    </select>

    <select id="queryBaseList" parameterType="com.dyb.platforms.fixfunds.services.utils.core.QueryParams" resultMap="resultMap">
        select
        <include refid="baseCol" />
        from dyb_member
        <include refid="whereSql" />
        <include refid="orderSql" />
    </select>

    <select id="queryDetailList" parameterType="com.dyb.platforms.fixfunds.services.utils.core.QueryParams" resultMap="resultMap">
        select * from dyb_member
        <include refid="whereSql" />
        <include refid="orderSql" />
    </select>
</mapper> 


